{"version":3,"sources":["api/todolists-api.ts","utilites/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.tsx","features/TodolistsList/Todolist/todolist-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","сomponents/AddItemForm/AddItemForm.tsx","сomponents/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","сomponents/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","сomponents/Loader/loader.svg","сomponents/Loader/Preloader.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","loginApi","data","post","delete","get","todolistsApi","title","todolistId","put","taskId","properties","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkAppError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","changeIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","push","filter","entityStatus","changeTodolistTitleAC","newTitle","changeTodolistFilterAC","newFilterValue","changeTodolistEntityStatusAC","setTodolistsAC","map","todoListsReducer","removeTaskAC","tasks","t","addTaskAC","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","task","find","Error","apiProperties","description","priority","startDate","deadline","then","res","resultCode","catch","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskTitle","changeTaskStatus","className","Checkbox","checked","newIsDone","Completed","New","InProgress","Delete","Todolist","useDispatch","useEffect","todolist","items","addTask","useCallback","allTodolistTasks","tasksForTodolist","changeTodolistTitle","removeTodolist","style","listStyle","padding","Button","marginRight","size","changeFilter","TodolistsList","todolists","useSelector","auth","thunk","removeTasksTC","taskTitle","item","addTaskTC","changeTodolistFilter","changeTodolistTitleTC","deleteTodolistTC","addTodolist","todolistTitle","todolistComponents","Grid","Paper","elevation","container","paddingTop","spacing","path","element","to","Alert","ErrorSnackbar","app","isError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","Preloader","position","left","top","transform","src","preloader","App","logOutHandler","AppBar","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83510520.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\n\r\nlet settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '27fcbdba-1f27-4a26-aef3-5bdefc4c041f'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n })\r\n\r\n\r\nexport const loginApi = {\r\n    loginUser(data: LoginDataType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    logOutUser() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    initApp() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\nexport const todolistsApi = {\r\n    getTodolists () {\r\n        return instance.get<TodolistType[]>(`todo-lists`)\r\n    },\r\n    createTodolist (title: string) {\r\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist (todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    changeTodolistTitle (todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n\r\n\r\n    getTasks (todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask (todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask (todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask (todolistId: string, taskId: string, properties: UpdateTaskPropertiesType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, properties)\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Mi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type UpdateTaskPropertiesType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"react\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<any>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred!'}))\r\n    }\r\n    setAppStatusAC({status: 'failed'})\r\n}\r\n\r\nexport const handleServerNetworkAppError = <D>(error: {message: string}, dispatch: Dispatch<any>) => {\r\n    dispatch(setAppErrorAC({error: error.message? error.message : 'Some error occurred!'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {loginApi, LoginDataType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkAppError} from \"../../utilites/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst InitialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: InitialState,\r\n    reducers: {\r\n        changeIsLoggedInAC: (state, action: PayloadAction<{isLoggedIn: boolean}>) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {changeIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n//thunks\r\nexport let loginUserTC = (data: LoginDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        loginApi.loginUser(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeIsLoggedInAC({isLoggedIn: true}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkAppError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport let logOutUserTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        loginApi.logOutUser()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeIsLoggedInAC({isLoggedIn: false}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkAppError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {loginApi} from \"../api/todolists-api\";\r\nimport {changeIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n\r\n//thunks\r\nexport let initializeAppTC = () => (dispatch: Dispatch) => {\r\n    loginApi.initApp()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeIsLoggedInAC({isLoggedIn: true}))\r\n\r\n            }\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n","import {todolistsApi, TodolistType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC\r\n} from \"../../../app/app-reducer\";\r\nimport {handleServerNetworkAppError} from \"../../../utilites/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: TodolistEntityType[] = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<string>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload)\r\n            if (index !== -1) state.splice(index, 1)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<TodolistType>) {\r\n            state.push({...action.payload, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{todolistId: string, newTitle: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.newTitle\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{todolistId: string, newFilterValue: FilterType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.newFilterValue\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{todolistId: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<TodolistType[]>) {\r\n            return action.payload.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todoListsReducer = slice.reducer\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC, setTodolistsAC} = slice.actions\r\n\r\n\r\n//thunks\r\nexport let fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkAppError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport let deleteTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({status: 'loading', todolistId}))\r\n        todolistsApi.deleteTodolist(todolistId)\r\n            .then(res => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport let addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.createTodolist(title)\r\n            .then(res => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport let changeTodolistTitleTC = (todolistId: string ,newTitle: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.changeTodolistTitle(todolistId, newTitle)\r\n            .then(res => {\r\n                dispatch(changeTodolistTitleAC({todolistId, newTitle}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistEntityType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\n\r\n","import {TaskType, todolistsApi, UpdateTaskPropertiesType} from \"../../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../../app/store\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"../todolist-reducer\";\r\nimport {setAppStatusAC} from \"../../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkAppError} from \"../../../../utilites/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst InitialState: TaskStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: InitialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, properties: UpdateTaskDomainPropertiesType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) tasks[index] = {...tasks[index], ...action.payload.properties}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: TaskType[], todolistId: string}>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n\r\n//thunks\r\nexport let fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTasksAC({tasks: res.data.items, todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport let removeTasksTC = (todolistId: string, taskId: string, properties: UpdateTaskDomainPropertiesType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(updateTaskAC({taskId, properties, todolistId}))\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC({taskId, todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\n\r\nexport let addTaskTC = (todolistId: string, taskTitle: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsApi.createTask(todolistId, taskTitle)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkAppError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateTaskDomainPropertiesType =  {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport let updateTaskTC = (taskId: string, properties: UpdateTaskDomainPropertiesType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            throw new Error(\"Task not found\")\r\n            return\r\n        }\r\n\r\n        let apiProperties: UpdateTaskPropertiesType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...properties\r\n        }\r\n\r\n        todolistsApi.updateTask(todolistId, taskId, apiProperties)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, properties, todolistId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkAppError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\nimport {AddBox, Delete} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled}: AddItemPropsType) => {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => { //give only TITLE to parent's callback\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressAddItemHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    value={title}\r\n                    onChange={onChangeTitleHandler}\r\n                    onKeyPress={onKeyPressAddItemHandler}\r\n                    label={\"Title\"}\r\n                    error={!!error}\r\n                    helperText={error}\r\n                />\r\n                {/*<input value={title}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressAddItemHandler}\r\n                       className={error ? \"error\" : \"\"}\r\n                />*/}\r\n                {/*<button onClick={addItemHandler}>+</button>*/}\r\n                <IconButton\r\n                    onClick={ addItemHandler }\r\n                    color={\"primary\"}\r\n                    disabled={disabled}\r\n                >\r\n                    <AddBox />\r\n                </IconButton>\r\n                {/*{error && <div className=\"error-message\"> {error} </div>}*/}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField\r\n            color={\"secondary\"}\r\n            value={title}\r\n            onChange={ changeTitleHandler }\r\n            onBlur={ activateViewMode }\r\n            autoFocus\r\n        />\r\n        /*? <input value={title} onChange={ changeTitleHandler } onBlur={ activateViewMode } autoFocus/>*/\r\n        : <span onDoubleClick={ activateEditMode }>{props.title}</span>\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../сomponents/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType,\r\n    todolistId: string\r\n    removeTask: (taskId: string) => void,\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void,\r\n    changeTaskTitle: (taskId: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const Task = React.memo(({task, removeTask, changeTaskTitle, changeTaskStatus}: TaskPropsType) => {\r\n\r\n    const removeTaskHandler = () => removeTask(task.id)\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDone ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = (newTitle: string) => changeTaskTitle(task.id, newTitle)\r\n\r\n    return <li key={task.id} className={task.status === 2 ? \"done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status === 2}\r\n            onChange={changeTaskStatusHandler}\r\n            color={\"primary\"}\r\n        />\r\n        <EditableSpan\r\n            title={task.title}\r\n            onChange={changeTaskTitleHandler}\r\n        />\r\n        <IconButton onClick={removeTaskHandler} disabled={task.status === TaskStatuses.InProgress}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport '../../../app/App.css';\r\nimport {AddItemForm} from \"../../../сomponents/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../сomponents/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./Task/tasks-reducer\";\r\nimport {FilterType, TodolistEntityType} from \"./todolist-reducer\";\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistEntityType\r\n    tasks: TaskType[]\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newValue: string, todolistId: string) => void\r\n    changeFilter: (value: FilterType, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string ,newTitle: string) => void\r\n}\r\n\r\nconst Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => { // parent's callback\r\n        props.addTask(title, props.todolist.id)\r\n    } , [])\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }\r\n\r\n    let allTodolistTasks = props.tasks\r\n    let tasksForTodolist = allTodolistTasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string) => props.removeTask(taskId, props.todolist.id), [props.removeTask, props.todolist.id])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        props.changeTaskStatus(taskId, status, props.todolist.id)\r\n    }, [props.changeTaskStatus, props.todolist.id])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string) => {\r\n        props.changeTaskTitle(taskId, newTitle, props.todolist.id)\r\n    }, [props.changeTaskTitle, props.todolist.id])\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={ changeTodolistTitle } />\r\n                <IconButton\r\n                    onClick={ () => props.removeTodolist(props.todolist.id)}\r\n                    disabled={props.todolist.entityStatus === \"loading\"}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addTask}\r\n                disabled={props.todolist.entityStatus === \"loading\"}\r\n            />\r\n                <ul style={{ listStyle: 'none', padding: \"0px\" }}>\r\n                    {\r\n                        tasksForTodolist.map( t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.todolist.id}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                        />\r\n\r\n                     ) }\r\n                </ul>\r\n            <div>\r\n                <Button\r\n                    style={{marginRight: \"10px\"}}\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    variant={props.todolist.filter === \"all\" ? \"outlined\" : \"contained\"}\r\n                    onClick={ () => props.changeFilter(\"all\", props.todolist.id) }>All\r\n                </Button>\r\n                <Button\r\n                    style={{marginRight: \"10px\"}}\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    variant={props.todolist.filter === \"active\" ? \"outlined\" : \"contained\"}\r\n                    onClick={ () => props.changeFilter(\"active\", props.todolist.id) }>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={\"primary\"}\r\n                    variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"contained\"}\r\n                    onClick={ () => props.changeFilter(\"completed\", props.todolist.id) }>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nexport default Todolist;\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC, deleteTodolistTC,\r\n    fetchTodolistsTC, FilterType,\r\n    TodolistEntityType\r\n} from \"./Todolist/todolist-reducer\";\r\nimport {addTaskTC, removeTasksTC, TaskStateType, updateTaskTC} from \"./Todolist/Task/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../сomponents/AddItemForm/AddItemForm\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC<any> = (props) => {\r\n\r\n    let todolists = useSelector<AppRootStateType, TodolistEntityType[]>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        let thunk = removeTasksTC(todolistId, taskId, {status: TaskStatuses.InProgress})\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n    let addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        let thunk = addTaskTC(todolistId, taskTitle)\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n    let changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        let thunk = updateTaskTC(taskId, {status}, todolistId)\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n    let changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        let thunk = updateTaskTC(taskId, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n\r\n\r\n\r\n    let changeTodolistFilter = useCallback((newFilterValue: FilterType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC({newFilterValue, todolistId}))\r\n    } , [dispatch])\r\n    let changeTodolistTitle = useCallback((todolistId: string ,newTitle: string) => {\r\n        let thunk = changeTodolistTitleTC(todolistId, newTitle)\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n    let removeTodolist = useCallback((todolistId: string) => {\r\n        let thunk = deleteTodolistTC(todolistId)\r\n        dispatch(thunk)\r\n    } , [dispatch])\r\n    let addTodolist = useCallback((todolistTitle: string) => {\r\n        let thunk = addTodolistTC(todolistTitle)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    /*UI:*/\r\n    let todolistComponents = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: \"20px\"}}>\r\n                    <Todolist\r\n                        todolist={tl}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeFilter={changeTodolistFilter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Routes>\r\n            <Route path=\"/\" element={<Navigate to=\"/login\" />} />\r\n        </Routes>\r\n    }\r\n\r\n    return <>\r\n        <Grid container={true}>\r\n            <AddItemForm addItem={ addTodolist }  />\r\n        </Grid>\r\n        <Grid container={true} style={{paddingTop: \"20px\"}} spacing={2}>\r\n            { todolistComponents }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    let error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    let dispatch = useDispatch();\r\n\r\n    let isError = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isError} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                <span>{error}</span>\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\n\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginUserTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    let dispatch = useDispatch()\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Enter email!\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required!\"\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginUserTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Routes>\r\n            <Route path=\"/\" element={<Navigate to=\"/\" />} />\r\n        </Routes>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loader.4356ad35.svg\";","import React from 'react';\r\nimport preloader from \"./loader.svg\";\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div style={{position: 'fixed', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>\r\n            <img src={preloader} />\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../сomponents/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Preloader} from \"../сomponents/Loader/Preloader\";\r\nimport {logOutUserTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutUserTC())\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        My trello\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button color=\"inherit\" variant={\"outlined\"} onClick={logOutHandler}>Log out</Button>\r\n                        : <div></div>\r\n                    }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n\r\n            <Container fixed style={{paddingTop: \"20px\"}}>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList />}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path=\"/*\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/Todolist/Task/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodolistsList/Todolist/todolist-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n/*export type ThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionsType>;*/\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}